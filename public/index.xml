<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术闲谈</title>
    <link>https://blog.thor.today/</link>
    <description>Recent content on 技术闲谈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Thu, 16 Aug 2018 17:50:07 +0800</lastBuildDate>
    
	<atom:link href="https://blog.thor.today/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>利用hugo&#43;caddy快速搭建一个简单的博客系统</title>
      <link>https://blog.thor.today/posts/dev_a_blog_with_caddy_and_hugo/</link>
      <pubDate>Thu, 16 Aug 2018 17:50:07 +0800</pubDate>
      
      <guid>https://blog.thor.today/posts/dev_a_blog_with_caddy_and_hugo/</guid>
      <description>技术选型介绍 hugo 是一个非常简单的基于markdown生成博客的系统，是go语言开发的博客系统。 caddy 是一个简单易用的webserver服务，很好的支持了H2，尤其是基于Let&amp;rsquo;s Encrypt的 自动签发证书的功能，让你用的毫无压力。
安装 caddy 安装方式有多种，可以到官网上看，这里我们介绍3种安装方式：一个是用官方发布的二进制包安装，一个用Go的方式安装的步骤,一个是在官网的自助下载页面定制插件下载。
二进制包安装： wget https://github.com/mholt/caddy/releases/download/v0.11.0/caddy_v0.11.0_linux_amd64.tar.gz tar xvfz caddy_v0.11.0_linux_amd64.tar.gz cp caddy /usr/bin/  go源码安装 go get github.com/mholt/caddy/caddy go get github.com/caddyserver/builds cd $GOPATH/src/github.com/mholt/caddy/caddy go run build.go   这里有个要注意的是，caddy为了支持多平台的build配置，把普通的go build 升级为单独用build.go的方式进行包装。 安装好后，确保caddy在Path可找到的地方，这里因为我们是自己build的源码，需要自己把caddy二进制文件放到PATH中的某个目录下。
 官方定制插件下载 在官方的下载页面可以根据自己的操作系统、需要的插件种类、License类型等定制下载包。 这里需要注意的是license我们选择person，因为不想付费哈。 插件选择太多或选择了某些插件会导致服务端500错误，这个比较坑，希望官方早点解决这个bug。 根据本文的主题需要，我们这里选择http.hugo 和http.git两个插件。 &amp;gt; 小技巧： 如果你清楚需要什么插件，可以直接用命令行方式进行下载安装即可： curl https://getcaddy.com | bash -s personal http.git,http.hugo
[liufuqiang@cloud liufuqiang]$ curl https://getcaddy.com | bash -s personal http.git,http.hugo Downloading Caddy for linux/amd64 (personal license).</description>
    </item>
    
    <item>
      <title>Go语言世界里的HTTP2的探索</title>
      <link>https://blog.thor.today/posts/http2_adventure_in_the_go_world/</link>
      <pubDate>Thu, 16 Aug 2018 10:26:13 +0800</pubDate>
      
      <guid>https://blog.thor.today/posts/http2_adventure_in_the_go_world/</guid>
      <description>Go语言的标准库HTTP默认支持HTTP/2，它有非常多的文档和非常棒的代码实例。 在这篇文章里我会首先介绍一些go的HTTP/2的服务端新特性，并介绍客户端如何去使用这些新的特性。 之后我会推介一下h2conn项目，这是一个可以比较简单优雅的实现HTTP/2全双工通讯的工具库。
HTTP/2 服务端 首先让我们用Go语言搭建一个HTTP/2的服务端吧！ 根据HTTP2文档描述的，所有的事情都是自动配置的，我们甚至不需要导入go的标准库 http2包： &amp;gt; http2包是一个底层实现，它很少被人直接拿来使用。很多使用者会通过自动使用net/http包来间接的使用它。
HTTP/2是强制使用TLS(传送安全层)的。 为了能够完成需求我们需要一个私钥（private key)和一个证书（certificate)。 在Linux上，产生私钥的方法如下。运行以下命令并且按照提示执行操作即可。
openssl req -newkey rsa:2048 -nodes -keyout server.key -x509 -days 365 -out server.crt  这个命令会产生2个文件： server.key和server.crt 1. server.key: 包含我们服务端的私钥，在线上产品里请务必保持此文件的安全性和隐私性。这个key会用来对HTTPS的响应内容做加密处理，加密的内容可以用服务端的公钥（public key)解密。 2. server.crt: 服务端的证书。该文件可以代表着服务端的身份标识，并包含了服务端的公钥。这个文件可以被公开分享，它的内容也会在服务端和客户端做TLS握手的时候发送给客户端。
现在，我们看下服务端的实现代码，我们会使用go的标准库 HTTP server， 并依赖刚刚产生的SSL文件（私钥和正式）启用TLS模式。
package main import ( &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; ) func main() { // 创建一个 8000端口的服务 // 方式如同创建 HTTP/1.1 srv := &amp;amp;http.Server{Addr: &amp;quot;:8000&amp;quot;, Handler: http.HandlerFunc(handle)} // 因为我们使用的HTTP/2,所以需要用TLS启动服务 // 和用 HTTP/1.1 启用 TLS 连接一样 log.</description>
    </item>
    
  </channel>
</rss>